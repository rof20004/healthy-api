name: Execute Deployment

on:
  workflow_call:
    inputs:
      environment_value:
        description: 'Environment value'
        required: true
        default: 'dev'
        type: string
      aws_region:
        description: 'AWS region'
        required: true
        default: 'sa-east-1'
        type: string
      ecr_repository:
        description: 'ECR repository'
        required: true
        default: 'ajuda-api-dev'
        type: string
      ecs_service:
        description: 'ECS service'
        required: true
        default: 'ajuda-api-service'
        type: string
      ecs_cluster:
        description: 'ECS cluster'
        required: true
        default: 'ajuda-dev'
        type: string
      task_definition_family:
        description: 'Task definition family'
        required: true
        default: 'ajuda-api-dev'
        type: string
      container_name:
        description: 'Container name'
        required: true
        default: 'ajuda-api'
        type: string
      environment_name:
        description: 'Environment name'
        required: true
        default: 'DEVELOPMENT'
        type: string
      work_dir:
        description: 'Work directory'
        required: true
        default: './iac/terraform/terraform/aws'
        type: string
    secrets:
      aws_access_key_id:
        description: 'AWS access key ID'
        required: true
      aws_secret_access_key:
        description: 'AWS secret access key'
        required: true
      docker_username:
        description: 'Docker username'
        required: true
      docker_password:
        description: 'Docker password'
        required: true

jobs:
  provision-build-deploy:
    name: provision, build and deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_value }}

    steps:
      - name: Set outputs
        id: vars
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: cd ${{ inputs.work_dir }} && terraform fmt -check

      - name: Terraform Init
        id: init
        run: cd ${{ inputs.work_dir }} && terraform init -backend-config=${{ inputs.environment_value }}/backend.hcl

      - name: Terraform Validate
        id: validate
        run: cd ${{ inputs.work_dir }} && terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: cd ${{ inputs.work_dir }} && terraform plan -no-color -input=false -var-file=${{ inputs.environment_value }}/terraform.tfvars
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          cd ${{ inputs.work_dir }} && \
          terraform apply -auto-approve -input=false -var-file=${{ inputs.environment_value }}/terraform.tfvars
        continue-on-error: true

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x

      - name: Unit test
        run: |
          go test -v ./tests/unit -cover -coverpkg=./application/domains/paciente/services/... -coverprofile=coverage.out

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ inputs.ecr_repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.task_definition_family }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        env:
          OUTPUT_IMAGE: ${{ needs.build.outputs.image }}
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ecs_service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: false

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}

      - name: Publish to Docker Hub
        run: |
          docker buildx create --driver=docker-container --use
          docker buildx build --platform linux/amd64,linux/arm/v7,linux/arm64/v8,linux/arm64 --push -t ${{ secrets.docker_username }}/${{ inputs.container_name }}:latest .
          docker push ${{ secrets.docker_username }}/${{ inputs.container_name }}:latest
